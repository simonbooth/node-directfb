#include "common.h"


namespace DirectFB {

extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceKeyType_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceModifierKeyIdentifier_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceKeyIdentifier_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceKeySymbol_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceLockState_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceKeymapSymbolIndex_template();
extern v8::Handle<v8::Object> DFBInputDeviceKeymapEntry_construct( const DFBInputDeviceKeymapEntry *src );
extern void DFBInputDeviceKeymapEntry_read( DFBInputDeviceKeymapEntry *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> IDirectFB_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBSurface_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBPalette_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBInputDevice_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBDisplayLayer_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBWindow_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBEventBuffer_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBFont_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBImageProvider_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBVideoProvider_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBDataBuffer_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBScreen_template();
extern v8::Handle<v8::ObjectTemplate> IDirectFBGL_template();
extern v8::Handle<v8::ObjectTemplate> DFBResult_template();
extern v8::Handle<v8::ObjectTemplate> DFBBoolean_template();
extern v8::Handle<v8::Object> DFBPoint_construct( const DFBPoint *src );
extern void DFBPoint_read( DFBPoint *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBSpan_construct( const DFBSpan *src );
extern void DFBSpan_read( DFBSpan *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBDimension_construct( const DFBDimension *src );
extern void DFBDimension_read( DFBDimension *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBRectangle_construct( const DFBRectangle *src );
extern void DFBRectangle_read( DFBRectangle *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBLocation_construct( const DFBLocation *src );
extern void DFBLocation_read( DFBLocation *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBRegion_construct( const DFBRegion *src );
extern void DFBRegion_read( DFBRegion *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBInsets_construct( const DFBInsets *src );
extern void DFBInsets_read( DFBInsets *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBTriangle_construct( const DFBTriangle *src );
extern void DFBTriangle_read( DFBTriangle *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBColor_construct( const DFBColor *src );
extern void DFBColor_read( DFBColor *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBColorKey_construct( const DFBColorKey *src );
extern void DFBColorKey_read( DFBColorKey *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBColorYUV_construct( const DFBColorYUV *src );
extern void DFBColorYUV_read( DFBColorYUV *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBCooperativeLevel_template();
extern v8::Handle<v8::ObjectTemplate> DFBDisplayLayerCapabilities_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenCapabilities_template();
extern v8::Handle<v8::ObjectTemplate> DFBDisplayLayerOptions_template();
extern v8::Handle<v8::ObjectTemplate> DFBDisplayLayerBufferMode_template();
extern v8::Handle<v8::ObjectTemplate> DFBSurfaceDescriptionFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBPaletteDescriptionFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBSurfaceCapabilities_template();
extern v8::Handle<v8::ObjectTemplate> DFBPaletteCapabilities_template();
extern v8::Handle<v8::ObjectTemplate> DFBSurfaceDrawingFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBSurfaceBlittingFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBSurfaceRenderOptions_template();
extern v8::Handle<v8::ObjectTemplate> DFBAccelerationMask_template();
extern v8::Handle<v8::ObjectTemplate> DFBDisplayLayerTypeFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceTypeFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceCapabilities_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceButtonIdentifier_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceAxisIdentifier_template();
extern v8::Handle<v8::ObjectTemplate> DFBWindowDescriptionFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBDataBufferDescriptionFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBWindowCapabilities_template();
extern v8::Handle<v8::ObjectTemplate> DFBWindowOptions_template();
extern v8::Handle<v8::ObjectTemplate> DFBWindowStackingClass_template();
extern v8::Handle<v8::ObjectTemplate> DFBFontAttributes_template();
extern v8::Handle<v8::ObjectTemplate> DFBFontDescriptionFlags_template();
extern v8::Handle<v8::Object> DFBFontDescription_construct( const DFBFontDescription *src );
extern void DFBFontDescription_read( DFBFontDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBSurfacePixelFormat_template();
extern v8::Handle<v8::Object> DFBSurfaceDescription_construct( const DFBSurfaceDescription *src );
extern void DFBSurfaceDescription_read( DFBSurfaceDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBPaletteDescription_construct( const DFBPaletteDescription *src );
extern void DFBPaletteDescription_read( DFBPaletteDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBDisplayLayerDescription_construct( const DFBDisplayLayerDescription *src );
extern void DFBDisplayLayerDescription_read( DFBDisplayLayerDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBDisplayLayerSourceCaps_template();
extern v8::Handle<v8::Object> DFBDisplayLayerSourceDescription_construct( const DFBDisplayLayerSourceDescription *src );
extern void DFBDisplayLayerSourceDescription_read( DFBDisplayLayerSourceDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBScreenDescription_construct( const DFBScreenDescription *src );
extern void DFBScreenDescription_read( DFBScreenDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBInputDeviceDescription_construct( const DFBInputDeviceDescription *src );
extern void DFBInputDeviceDescription_read( DFBInputDeviceDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceAxisInfoFlags_template();
extern v8::Handle<v8::Object> DFBInputDeviceAxisInfo_construct( const DFBInputDeviceAxisInfo *src );
extern void DFBInputDeviceAxisInfo_read( DFBInputDeviceAxisInfo *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBGraphicsDriverInfo_construct( const DFBGraphicsDriverInfo *src );
extern void DFBGraphicsDriverInfo_read( DFBGraphicsDriverInfo *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBGraphicsDeviceDescription_construct( const DFBGraphicsDeviceDescription *src );
extern void DFBGraphicsDeviceDescription_read( DFBGraphicsDeviceDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBWindowDescription_construct( const DFBWindowDescription *src );
extern void DFBWindowDescription_read( DFBWindowDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBDataBufferDescription_construct( const DFBDataBufferDescription *src );
extern void DFBDataBufferDescription_read( DFBDataBufferDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBEnumerationResult_template();
extern v8::Handle<v8::ObjectTemplate> DFBVideoProviderCapabilities_template();
extern v8::Handle<v8::ObjectTemplate> DFBVideoProviderStatus_template();
extern v8::Handle<v8::ObjectTemplate> DFBVideoProviderPlaybackFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBVideoProviderAudioUnits_template();
extern v8::Handle<v8::ObjectTemplate> DFBColorAdjustmentFlags_template();
extern v8::Handle<v8::Object> DFBColorAdjustment_construct( const DFBColorAdjustment *src );
extern void DFBColorAdjustment_read( DFBColorAdjustment *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBDisplayLayerCooperativeLevel_template();
extern v8::Handle<v8::ObjectTemplate> DFBDisplayLayerBackgroundMode_template();
extern v8::Handle<v8::ObjectTemplate> DFBDisplayLayerConfigFlags_template();
extern v8::Handle<v8::Object> DFBDisplayLayerConfig_construct( const DFBDisplayLayerConfig *src );
extern void DFBDisplayLayerConfig_read( DFBDisplayLayerConfig *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBScreenPowerMode_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenMixerCapabilities_template();
extern v8::Handle<v8::Object> DFBScreenMixerDescription_construct( const DFBScreenMixerDescription *src );
extern void DFBScreenMixerDescription_read( DFBScreenMixerDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBScreenMixerConfigFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenMixerTree_template();
extern v8::Handle<v8::Object> DFBScreenMixerConfig_construct( const DFBScreenMixerConfig *src );
extern void DFBScreenMixerConfig_read( DFBScreenMixerConfig *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBScreenOutputCapabilities_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenOutputConnectors_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenOutputSignals_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenOutputSlowBlankingSignals_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenOutputResolution_template();
extern v8::Handle<v8::Object> DFBScreenOutputDescription_construct( const DFBScreenOutputDescription *src );
extern void DFBScreenOutputDescription_read( DFBScreenOutputDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBScreenOutputConfigFlags_template();
extern v8::Handle<v8::Object> DFBScreenOutputConfig_construct( const DFBScreenOutputConfig *src );
extern void DFBScreenOutputConfig_read( DFBScreenOutputConfig *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBScreenEncoderCapabilities_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenEncoderType_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenEncoderTVStandards_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenEncoderScanMode_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenEncoderFrequency_template();
extern v8::Handle<v8::Object> DFBScreenEncoderDescription_construct( const DFBScreenEncoderDescription *src );
extern void DFBScreenEncoderDescription_read( DFBScreenEncoderDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBScreenEncoderConfigFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBScreenEncoderTestPicture_template();
extern v8::Handle<v8::Object> DFBScreenEncoderConfig_construct( const DFBScreenEncoderConfig *src );
extern void DFBScreenEncoderConfig_read( DFBScreenEncoderConfig *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBSurfaceFlipFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBSurfaceTextFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBSurfaceLockFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBSurfacePorterDuffRule_template();
extern v8::Handle<v8::ObjectTemplate> DFBSurfaceBlendFunction_template();
extern v8::Handle<v8::Object> DFBVertex_construct( const DFBVertex *src );
extern void DFBVertex_read( DFBVertex *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBTriangleFormation_template();
extern v8::Handle<v8::ObjectTemplate> DFBSurfaceMaskFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceKeyState_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceButtonState_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceButtonMask_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputDeviceModifierMask_template();
extern v8::Handle<v8::ObjectTemplate> DFBEventClass_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputEventType_template();
extern v8::Handle<v8::ObjectTemplate> DFBInputEventFlags_template();
extern v8::Handle<v8::Object> DFBInputEvent_construct( const DFBInputEvent *src );
extern void DFBInputEvent_read( DFBInputEvent *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBWindowEventType_template();
extern v8::Handle<v8::ObjectTemplate> DFBWindowEventFlags_template();
extern v8::Handle<v8::ObjectTemplate> DFBVideoProviderEventType_template();
extern v8::Handle<v8::Object> DFBWindowEvent_construct( const DFBWindowEvent *src );
extern void DFBWindowEvent_read( DFBWindowEvent *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBVideoProviderEventDataSubType_template();
extern v8::Handle<v8::Object> DFBVideoProviderEvent_construct( const DFBVideoProviderEvent *src );
extern void DFBVideoProviderEvent_read( DFBVideoProviderEvent *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBUserEvent_construct( const DFBUserEvent *src );
extern void DFBUserEvent_read( DFBUserEvent *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBUniversalEvent_construct( const DFBUniversalEvent *src );
extern void DFBUniversalEvent_read( DFBUniversalEvent *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBEvent_construct( const DFBEvent *src );
extern void DFBEvent_read( DFBEvent *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBEventBufferStats_construct( const DFBEventBufferStats *src );
extern void DFBEventBufferStats_read( DFBEventBufferStats *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBWindowKeySelection_template();
extern v8::Handle<v8::ObjectTemplate> DFBWindowGeometryMode_template();
extern v8::Handle<v8::Object> DFBWindowGeometry_construct( const DFBWindowGeometry *src );
extern void DFBWindowGeometry_read( DFBWindowGeometry *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBImageCapabilities_template();
extern v8::Handle<v8::Object> DFBImageDescription_construct( const DFBImageDescription *src );
extern void DFBImageDescription_read( DFBImageDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DIRenderCallbackResult_template();
extern v8::Handle<v8::ObjectTemplate> DFBStreamCapabilities_template();
extern v8::Handle<v8::Object> DFBStreamDescription_construct( const DFBStreamDescription *src );
extern void DFBStreamDescription_read( DFBStreamDescription *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::ObjectTemplate> DFBStreamFormat_template();
extern v8::Handle<v8::Object> DFBStreamAttributes_construct( const DFBStreamAttributes *src );
extern void DFBStreamAttributes_read( DFBStreamAttributes *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBBufferOccupancy_construct( const DFBBufferOccupancy *src );
extern void DFBBufferOccupancy_read( DFBBufferOccupancy *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBBufferThresholds_construct( const DFBBufferThresholds *src );
extern void DFBBufferThresholds_read( DFBBufferThresholds *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBGLAttributes_construct( const DFBGLAttributes *src );
extern void DFBGLAttributes_read( DFBGLAttributes *dst, v8::Handle<v8::Value> src );
extern v8::Handle<v8::Object> DFBUpdates_construct( const DFBUpdates *src );
extern void DFBUpdates_read( DFBUpdates *dst, v8::Handle<v8::Value> src );

}
